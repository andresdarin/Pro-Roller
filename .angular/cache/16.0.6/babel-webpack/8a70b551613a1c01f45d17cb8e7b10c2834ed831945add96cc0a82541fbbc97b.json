{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./trabajos.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./trabajos.component.css?ngResource\";\nimport { Component, ViewChild } from '@angular/core';\nlet TrabajosComponent = class TrabajosComponent {\n  constructor() {\n    this.scrollAmount = 0;\n    this.speed = 0.5;\n    this.isHovered = false;\n    this.isPaused = false;\n    this.isInitialized = false;\n    // Variables para drag functionality\n    this.isDragging = false;\n    this.startX = 0;\n    this.startScrollAmount = 0;\n    this.dragVelocity = 0;\n    this.lastDragTime = 0;\n    this.lastDragX = 0;\n    this.isMobile = false;\n    // Variables para modal\n    this.selectedImage = null;\n    this.showModal = false;\n    this.trabajos = [{\n      img: \"assets/img/IMG-20250726-WA0053.jpg\",\n      titulo: \"Roller Screen en Ventanal\",\n      descripcion: \"Cortina roller screen en un amplio ventanal, permitiendo la visibilidad exterior y filtrando la luz.\",\n      size: \"large\"\n    }, {\n      img: \"assets/img/IMG-20250726-WA0056.jpg\",\n      titulo: \"Roller Dual en Espacio Moderno\",\n      descripcion: \"Cortina roller dual en un ambiente con diseño moderno, ofreciendo versatilidad en la entrada de luz.\",\n      size: \"large\"\n    }, {\n      img: \"assets/img/roller-translucida.jpeg\",\n      titulo: \"Tela Screen\",\n      descripcion: \"Filtra el sol directo, protegiendo tus espacios del deterioro.\",\n      size: \"large\"\n    }, {\n      img: \"assets/img/IMG-20250721-WA0006.jpg\",\n      titulo: \"Pinza italiana 2\",\n      descripcion: \"Cortina clásica con un toque más moderno.\",\n      size: \"wide\"\n    }, {\n      img: \"assets/img/cortina-tipo-antigua-translucida.jpeg\",\n      titulo: \"Pinza italiana 1\",\n      descripcion: \"Cortina clásica con un toque más moderno.\",\n      size: \"wide\"\n    }, {\n      img: \"assets/img/IMG-20250726-WA0061.jpg\",\n      titulo: \"Ambiente Interior con Cortinas Suaves\",\n      descripcion: \"Cortinas de tela suave que crean un ambiente relajante y acogedor en el interior.\",\n      size: \"giant\"\n    }, {\n      img: \"assets/img/IMG-20250726-WA0059.jpg\",\n      titulo: \"Cortina Texturizada\",\n      descripcion: \"Cortina con textura sutil, combinando funcionalidad y estilo.\",\n      size: \"normal\"\n    }, {\n      img: \"assets/img/IMG-20250726-WA0057.jpg\",\n      titulo: \"Cortina Corta para Ventana\",\n      descripcion: \"Cortina corta ideal para ventanas pequeñas, brindando privacidad sin obstaculizar el espacio.\",\n      size: \"normal\"\n    }, {\n      img: \"assets/img/IMG-20250726-WA0052.jpg\",\n      titulo: \"Roller Blackout Gris\",\n      descripcion: \"Cortina roller blackout de color gris, ideal para oscurecer el ambiente.\",\n      size: \"giant\"\n    }, {\n      img: \"assets/img/IMG-20250726-WA0050.jpg\",\n      titulo: \"Bambú\",\n      descripcion: \"Estilo rústico, ideal para ambientes cálidos.\",\n      size: \"large\"\n    }, {\n      img: \"assets/img/IMG-20250726-WA0060.jpg\",\n      titulo: \"Cortina Clásica para Oficina\",\n      descripcion: \"Cortina clásica que brinda un toque de elegancia y privacidad a un espacio de oficina.\",\n      size: \"normal\"\n    }, {\n      img: \"assets/img/roller-blackout.jpeg\",\n      titulo: \"Black Out\",\n      descripcion: \"Aislante térmico y sonoro. Totalmente opaca.\",\n      size: \"normal\"\n    }, {\n      img: \"assets/img/IMG-20250726-WA0055.jpg\",\n      titulo: \"Cortinas Opacas en Habitación\",\n      descripcion: \"Cortinas opacas que garantizan privacidad y control total de la luz en el dormitorio.\",\n      size: \"wide\"\n    }, {\n      img: \"assets/img/IMG-20250726-WA0062.jpg\",\n      titulo: \"Dormitorio con Cortina Roller\",\n      descripcion: \"Dormitorio con cortina roller que permite regular la entrada de luz y asegurar el descanso.\",\n      size: \"large\"\n    }, {\n      img: \"assets/img/IMG-20250726-WA0058.jpg\",\n      titulo: \"Cortinas en Sala de Estar\",\n      descripcion: \"Cortinas que complementan la decoración de una sala de estar, aportando calidez.\",\n      size: \"wide\"\n    }, {\n      img: \"assets/img/roller-rayada.jpeg\",\n      titulo: \"Bambú rayada\",\n      descripcion: \"Ideal para ambientes con estilo natural.\",\n      size: \"large\"\n    }, {\n      img: \"assets/img/IMG-20250726-WA0051.jpg\",\n      titulo: \"Cortina Blanca Tradicional\",\n      descripcion: \"Cortina de tela blanca clásica, aportando luminosidad a la habitación.\",\n      size: \"large\"\n    }, {\n      img: \"assets/img/cortina-tipo-antigua.jpeg\",\n      titulo: \"Tradicional\",\n      descripcion: \"Con pinza americana. Cálidas y acogedoras.\",\n      size: \"giant\"\n    }];\n  }\n  get trabajosInfinitos() {\n    return [...this.trabajos, ...this.trabajos, ...this.trabajos];\n  }\n  ngAfterViewInit() {\n    this.checkIfMobile();\n    setTimeout(() => {\n      this.setupEventListeners();\n      this.startScrollAnimation();\n    }, 300);\n    setTimeout(() => {\n      if (!this.isInitialized) {\n        this.startScrollAnimation();\n      }\n    }, 1000);\n    // Listener para cambios de tamaño de ventana\n    window.addEventListener('resize', () => {\n      this.checkIfMobile();\n    });\n  }\n  ngOnDestroy() {\n    this.cleanup();\n    if (this.momentumId) {\n      cancelAnimationFrame(this.momentumId);\n    }\n  }\n  checkIfMobile() {\n    this.isMobile = window.innerWidth <= 768;\n  }\n  cleanup() {\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = undefined;\n    }\n  }\n  setupEventListeners() {\n    const container = this.sliderContainer.nativeElement;\n    // Eventos de mouse para desktop\n    if (!this.isMobile) {\n      container.addEventListener('mouseenter', () => {\n        this.isHovered = true;\n      });\n      container.addEventListener('mouseleave', () => {\n        this.isHovered = false;\n      });\n    }\n    // Eventos touch para móvil\n    if (this.isMobile) {\n      this.setupTouchEvents(container);\n    }\n    // Manejar visibilidad de la pestaña\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        this.isPaused = true;\n      } else {\n        this.isPaused = false;\n      }\n    });\n  }\n  setupTouchEvents(container) {\n    let touchStartTime = 0;\n    let touchStartX = 0;\n    let hasMoved = false;\n    // Touch start\n    container.addEventListener('touchstart', e => {\n      if (e.touches.length !== 1) return;\n      touchStartTime = Date.now();\n      touchStartX = e.touches[0].clientX;\n      hasMoved = false;\n      this.startX = e.touches[0].clientX;\n      this.startScrollAmount = this.scrollAmount;\n      this.isDragging = true;\n      this.isPaused = true;\n      this.dragVelocity = 0;\n      this.lastDragTime = Date.now();\n      this.lastDragX = this.startX;\n      if (this.momentumId) {\n        cancelAnimationFrame(this.momentumId);\n        this.momentumId = undefined;\n      }\n      container.style.cursor = 'grabbing';\n    }, {\n      passive: false\n    });\n    // Touch move\n    container.addEventListener('touchmove', e => {\n      if (!this.isDragging || e.touches.length !== 1) return;\n      e.preventDefault();\n      hasMoved = true;\n      const currentX = e.touches[0].clientX;\n      const deltaX = this.startX - currentX;\n      const currentTime = Date.now();\n      // Calcular velocidad para momentum\n      if (currentTime - this.lastDragTime > 0) {\n        this.dragVelocity = (this.lastDragX - currentX) / (currentTime - this.lastDragTime);\n      }\n      this.lastDragX = currentX;\n      this.lastDragTime = currentTime;\n      // Actualizar posición\n      const newScrollAmount = this.startScrollAmount + deltaX;\n      const singleSetWidth = this.calculateSingleSetWidth();\n      // Wrap around logic\n      if (newScrollAmount < 0) {\n        this.scrollAmount = singleSetWidth + newScrollAmount % singleSetWidth;\n      } else if (newScrollAmount >= singleSetWidth) {\n        this.scrollAmount = newScrollAmount % singleSetWidth;\n      } else {\n        this.scrollAmount = newScrollAmount;\n      }\n      this.updateSliderPosition();\n    }, {\n      passive: false\n    });\n    // Touch end\n    container.addEventListener('touchend', e => {\n      if (!this.isDragging) return;\n      const touchEndTime = Date.now();\n      const touchDuration = touchEndTime - touchStartTime;\n      const touchDistance = Math.abs(e.changedTouches[0].clientX - touchStartX);\n      // Si fue un tap rápido y sin mucho movimiento, es un click\n      if (touchDuration < 300 && touchDistance < 10 && !hasMoved) {\n        // Buscar el elemento imagen más cercano\n        const target = e.target;\n        const imageElement = target.closest('li')?.querySelector('img');\n        if (imageElement) {\n          const imgSrc = imageElement.src;\n          const trabajo = this.trabajos.find(t => imgSrc.includes(t.img.split('/').pop() || ''));\n          if (trabajo) {\n            this.openModal(trabajo);\n          }\n        }\n      }\n      this.isDragging = false;\n      container.style.cursor = 'grab';\n      // Aplicar momentum si hay velocidad\n      if (Math.abs(this.dragVelocity) > 0.1 && hasMoved) {\n        this.applyMomentum();\n      } else {\n        this.isPaused = false;\n      }\n    });\n  }\n  applyMomentum() {\n    const friction = 0.95;\n    const minVelocity = 0.1;\n    const momentum = () => {\n      if (Math.abs(this.dragVelocity) < minVelocity) {\n        this.isPaused = false;\n        return;\n      }\n      this.scrollAmount += this.dragVelocity * 5;\n      this.dragVelocity *= friction;\n      const singleSetWidth = this.calculateSingleSetWidth();\n      if (this.scrollAmount < 0) {\n        this.scrollAmount = singleSetWidth + this.scrollAmount % singleSetWidth;\n      } else if (this.scrollAmount >= singleSetWidth) {\n        this.scrollAmount = this.scrollAmount % singleSetWidth;\n      }\n      this.updateSliderPosition();\n      this.momentumId = requestAnimationFrame(momentum);\n    };\n    this.momentumId = requestAnimationFrame(momentum);\n  }\n  updateSliderPosition() {\n    const sliderGrid = this.sliderGrid.nativeElement;\n    sliderGrid.style.transform = `translateX(-${this.scrollAmount}px)`;\n  }\n  startScrollAnimation() {\n    if (this.isInitialized) return;\n    const sliderGrid = this.sliderGrid.nativeElement;\n    this.isInitialized = true;\n    const animate = () => {\n      if (!this.isHovered && !this.isPaused && !document.hidden && !this.isDragging) {\n        this.scrollAmount += this.speed;\n        const singleSetWidth = this.calculateSingleSetWidth();\n        if (this.scrollAmount >= singleSetWidth) {\n          this.scrollAmount = 0;\n        }\n        sliderGrid.style.transform = `translateX(-${this.scrollAmount}px)`;\n      }\n      this.animationId = requestAnimationFrame(animate);\n    };\n    setTimeout(() => {\n      animate();\n    }, 200);\n  }\n  calculateSingleSetWidth() {\n    const sliderGrid = this.sliderGrid.nativeElement;\n    const items = sliderGrid.querySelectorAll('li');\n    const itemsPerSet = this.trabajos.length;\n    if (items.length === 0) return 2000;\n    const firstSetItems = Array.from(items).slice(0, itemsPerSet);\n    if (firstSetItems.length === 0) return 2000;\n    let maxRight = 0;\n    firstSetItems.forEach(item => {\n      const rect = item.getBoundingClientRect();\n      const containerRect = sliderGrid.getBoundingClientRect();\n      const relativeRight = rect.right - containerRect.left + 15;\n      maxRight = Math.max(maxRight, relativeRight);\n    });\n    if (maxRight === 0) {\n      const estimatedWidth = itemsPerSet * (280 + 15);\n      return estimatedWidth;\n    }\n    return maxRight;\n  }\n  getItemClass(index, size) {\n    const baseClass = 'item';\n    switch (size) {\n      case 'large':\n        return `${baseClass} item-large`;\n      case 'giant':\n        return `${baseClass} item-giant`;\n      case 'wide':\n        return `${baseClass} item-wide`;\n      default:\n        return `${baseClass} item-normal`;\n    }\n  }\n  // Métodos para modal\n  openModal(trabajo) {\n    this.selectedImage = trabajo;\n    this.showModal = true;\n    document.body.style.overflow = 'hidden'; // Prevenir scroll del body\n  }\n\n  closeModal() {\n    this.showModal = false;\n    this.selectedImage = null;\n    document.body.style.overflow = 'auto'; // Restaurar scroll del body\n  }\n\n  onModalBackgroundClick(event) {\n    // Solo cerrar si se hace click en el background, no en la imagen\n    if (event.target === event.currentTarget) {\n      this.closeModal();\n    }\n  }\n  // Métodos públicos para control manual\n  pauseScroll() {\n    this.isPaused = true;\n  }\n  resumeScroll() {\n    this.isPaused = false;\n  }\n  setSpeed(newSpeed) {\n    this.speed = Math.max(0.5, Math.min(3, newSpeed));\n  }\n  reinitializeSlider() {\n    this.cleanup();\n    this.isInitialized = false;\n    this.scrollAmount = 0;\n    setTimeout(() => {\n      this.startScrollAnimation();\n    }, 100);\n  }\n  static {\n    this.propDecorators = {\n      sliderContainer: [{\n        type: ViewChild,\n        args: ['sliderContainer']\n      }],\n      sliderGrid: [{\n        type: ViewChild,\n        args: ['sliderGrid']\n      }]\n    };\n  }\n};\nTrabajosComponent = __decorate([Component({\n  selector: 'app-trabajos',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], TrabajosComponent);\nexport { TrabajosComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}