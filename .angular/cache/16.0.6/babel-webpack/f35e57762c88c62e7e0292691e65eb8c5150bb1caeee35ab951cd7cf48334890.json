{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./header.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./header.component.css?ngResource\";\nimport { Component, HostListener } from '@angular/core';\nlet HeaderComponent = class HeaderComponent {\n  constructor() {\n    this.menuAbierto = false;\n    this.previousScrollPosition = window.pageYOffset;\n    this.headerVisible = true;\n    this.isNavigating = false;\n  }\n  toggleMenu() {\n    this.menuAbierto = !this.menuAbierto;\n    // Prevenir scroll del body cuando el menú está abierto\n    if (this.menuAbierto) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = '';\n    }\n  }\n  hideBurguer() {\n    this.menuAbierto = false;\n    document.body.style.overflow = ''; // Restaurar scroll\n  }\n\n  navigateToSection(event, sectionId) {\n    event.preventDefault();\n    event.stopPropagation(); // Evita propagación de eventos\n    this.isNavigating = true;\n    this.headerVisible = true;\n    setTimeout(() => {\n      this.hideBurguer();\n      setTimeout(() => {\n        const section = document.getElementById(sectionId);\n        if (section) {\n          const headerHeight = 70;\n          const elementPosition = section.getBoundingClientRect().top;\n          const offsetPosition = elementPosition + window.pageYOffset - headerHeight;\n          window.scrollTo({\n            top: offsetPosition,\n            behavior: 'smooth'\n          });\n        }\n        setTimeout(() => {\n          this.isNavigating = false;\n        }, 500);\n      }, 50); // Delay post-cierre de menú\n    }, 50); // Delay pre-cierre\n  }\n\n  onWindowScroll() {\n    if (this.isNavigating || this.menuAbierto) {\n      return;\n    }\n    const currentScroll = window.pageYOffset;\n    const scrollThreshold = 100;\n    const scrollDifference = Math.abs(currentScroll - this.previousScrollPosition);\n    if (scrollDifference < 5) {\n      return;\n    }\n    if (currentScroll > this.previousScrollPosition && currentScroll > scrollThreshold) {\n      this.headerVisible = false;\n    } else if (currentScroll < this.previousScrollPosition || currentScroll <= scrollThreshold) {\n      this.headerVisible = true;\n    }\n    this.previousScrollPosition = currentScroll;\n  }\n  onWindowResize() {\n    if (this.menuAbierto) {\n      this.hideBurguer();\n    }\n  }\n  onKeyDown(event) {\n    if (event.key === 'Escape' && this.menuAbierto) {\n      this.hideBurguer();\n    }\n  }\n  onDocumentClick(event) {\n    const target = event.target;\n    const menuContainer = document.querySelector('.nav-container');\n    const hamburgerBtn = document.querySelector('.hamburger-btn');\n    if (this.menuAbierto && !menuContainer?.contains(target) && !hamburgerBtn?.contains(target)) {\n      this.hideBurguer();\n    }\n  }\n  static {\n    this.propDecorators = {\n      onWindowScroll: [{\n        type: HostListener,\n        args: ['window:scroll', []]\n      }],\n      onWindowResize: [{\n        type: HostListener,\n        args: ['window:resize', []]\n      }],\n      onKeyDown: [{\n        type: HostListener,\n        args: ['document:keydown', ['$event']]\n      }],\n      onDocumentClick: [{\n        type: HostListener,\n        args: ['document:click', ['$event']]\n      }]\n    };\n  }\n};\nHeaderComponent = __decorate([Component({\n  selector: 'app-header',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], HeaderComponent);\nexport { HeaderComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}